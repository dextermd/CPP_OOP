#include <iostream>
#include <stdlib.h>
#include <conio.h>
#include <iomanip>
#include <Windows.h>
#include "Rectangle.h"
#include "Coord.h"
#include "Stock.h"
#include "MyString.h"

using namespace std;

int main()
{

#if 1
    // -------------------------------------------------------------------------- //
    // Перезагрузка операций(operator)
    /*
        1. Правило перегрузки бинарных операций:
        определяется оператор(operator)-функция с одним параметром
        (передается правый операнд, левый операнд операции передается по this)
    */

    Coord a(2, 6), b(10, -3), c;

    a.show();

    cout << endl;

    b.show();

    cout << endl;

    //c = a.add(b);
    c = a + b; //c = a.add(b);
    c.show();

    cout << endl;

    c = a + 10;
    c.show();

    cout << endl;

    a += b;
    a.show();

    cout << endl;

    Coord t1(2, 3), t2(2, 3);
    if (t1 == t2)
    {
        cout << "\nКординаты равны\n";
    }
    else {
        cout << "\nКординаты не равны\n";
    }

    cout << (a != b) << endl;
    cout << (a > b) << endl;

#endif


#if 0
    // -- mutable Разрешает менять поле по this
    Coord a(2, 6);
    a.show();
#endif

#if 0

    /*
    Спецификатор delete осуществляет явное ограничение доступа
    к специальным методам классов (конструкторам, деструкторам,
    конструкторам перемещения, операторам присваивания и т. п.)
    */

    // Coord(double x, double y) = delete; Запрещает конструктор
    Coord a(20.154564, -15.5464);
    a.show();

#endif

#if 0

    /*
        Ключевое слово explicit - модификатор конструкторов
        с одним параметром.

        Используется для создания явных конструкторов.
        Другое название - «неконвертирующиеся конструкторы»
        (nonconverting constructors).

        Явное преобразование типа разрешено при explicit, т.е.
        explicit запрещает(отключает) неявное преобразование типа.
        */

    Coord x(20, 15);
    // x = 100; // error - explicit запрещаеет 
    x = Coord(100);
    x.show();

    Coord t = "12,36";
    t.show();

#endif

#if 0

    Coord x(20, 15);
    cout << "\nАдрес обьекта: " << &x;
    //x = 100;
    x = "25,-35";
    cout << "\nАдрес обьекта: " << &x << endl;
    x.show();

#endif


#if 0
    //-----------------------------------------------------
    /*
    Разработать класс MyString, который в дальнейшем будет
    использоваться для работы со строками и строковыми полями.

    Класс должен содержать:
    Поля:
        + адрес строки
        + длина строки
        + количество объектов
    Методы:
        + конструктор по умолчанию, позволяющий создать
          строку длиной 5 символов(содержание по умолчанию Hello);

        + конструктор c параметром, который создаёт строку и
          инициализирует её Си-строкой, полученной от пользователя;

        - конструктор с параметром, позволяющий создавать строку
          на основе целого числа(int);

        + метод для ввода строки с клавиатуры; (init)
        + метод    вывода строки на экран(show);

        + деструктор.

        Проверить работу класса и добавить:
        + конструктор копирования;
        + метод для редакции текущей строки; // void init(const char * str);
        + метод для сложения(конкатенации) двух строк.
    */

    MyString a("Test"), b("MyString"), c;
    a.show();
    b.show();
    c.show();

    // MyString d = a; // Вызываем конструктор копирования
    MyString d(a); // Вызываем конструктор копирования
    d.show();

    // ------------------------------------------------------------------------------ //
    // + Метод сложения(конкатенация) двух строк
    MyString r = a.add(b); // конструктор копий
    r.show();

#endif


}