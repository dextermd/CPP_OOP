#include <iostream>
#include <stdlib.h>
#include <conio.h>
#include <iomanip>
#include <Windows.h>
#include "Rectangle.h"
#include "Coord.h"
#include "Stock.h"
#include "MyString.h"

using namespace std;

int main()
{

#if 1

    // Дружественные функции 

    /*
    3. При перегрузке бинарных операций в случае, когда
    левый операнд не является объектом пользовательского класса
    обязательно    используются дружественная функция (принимает оба операнда).

    Дружественная функция - не является методом класса.
    Дружественная функция - есть доступ к закрытым полям класса через объект.
    Дружественная функция - нет доступа к this.

    ***При перегрузке бинарных операций можно использовать дружественную функцию в любом случае,
    но передаются всегда оба операнда.
    */


    /*
        Для класса coord перегрузить операцию:
            int + coord
    */

    Coord a(20, 6), b;

    // b = a + 10;

    // Левый оперант бинарной операции не является обьектом нашего класса
    // Когда левый операнд не является обьектом пользовательского класса для перегрузки  используется дружественная функция
    b = 10 + a;
    b.show();

    Coord t(2, 6), t1(-12, 5), t2;
    t2 = t * t1;
    cout << endl;
    t.show();
    t1.show();
    t2.show();


#endif 

#if 0
    /*
    2. При перегрузке унарной операции оператор-функция
           не имеет параметров
    */

    // int a = 5;
    // cout << a++; // 5
    // cout << ++a; // 6

    Coord a(2, -5), c(20,6);
    a.show();

    (++a).show();

    (a++).show();

    c.show();
    c = -c;
    c.show();

    



#endif


#if 0
    // --------------------------------------------------------------------------------------- //
    // Перегрузка бинарных  операции --------------------------------------------------------- //

    /*
        Для класса  MyString пергрузить операции :
        MyString + MyString    c = a + b;
        MyString += MyString
    */

    MyString a("Hello"), b("C++"), c;

    c = a + " " + b;
    c.show();

    cout << endl;

    b += ", ";
    b += a;
    b += "!";
    b.show();

    cout << endl;
    cout << "\nДлина строки: " << b.getLength() << endl;

#endif 



#if 0
    // --------------------------------------------------------------------------------------- //
    // Перегрузка бинарных  операции --------------------------------------------------------- //

    /*
    * Самостоятельно:
    Перегрузить для класса class MyString операции сравнения (==  !=  >   <)
    */

    MyString a("apple"), b("apple  ");

    if (a == b)
    {
        cout << "\nСтроки равны\n";
    }
    else {
        cout << "\nСтроки не равны\n";
    }

    if (a != b)
    {
        cout << "\nСтроки не равны\n";
    }
    else {
        cout << "\nСтроки равны\n";
    }

    if (a > b)
    {
        cout << "\na больше b\n";
    }
    else {
        cout << "\na не больше b\n";
    }


#endif 


#if 0
    // --------------------------------------------------------------------------------------- //
    // Перегрузка бинарных  операции --------------------------------------------------------- //

    // Перезагрузить квадратные скобки[] для класса MyString(специальная)

    MyString a("Hello, World 2023 !!!!!");
    a.show();
    cout << endl;
    cout << a[4] << endl;

    a[4] = '?';
    a.show();
    cout << endl;

#endif 



#if 0
    // --------------------------------------------------------------------------------------- //
    // Перегрузка бинарных  операции --------------------------------------------------------- //

    // Перезагрузить операцию присваивания(=) для класса MyString

    MyString a("Hello, World"), b;
    a.show();
    cout << endl;
    b.show();
    cout << endl;
    b = a; // operator= 

    // MyString c = a; // Вызовется конструктор копирования

    b.show();
    cout << endl;

    MyString d = b;
    d.show();
    d = d; // Защита от дурака
    cout << endl;
    d.show();
    cout << endl;

#endif


#if 0
    // -------------------------------------------------------------------------- //
    // Перезагрузка операций(operator)
    /*
        1. Правило перегрузки бинарных операций:
        определяется оператор(operator)-функция с одним параметром
        (передается правый операнд, левый операнд операции передается по this)
    */

    Coord a(2, 6), b(10, -3), c;

    a.show();

    cout << endl;

    b.show();

    cout << endl;

    //c = a.add(b);
    c = a + b; //c = a.add(b);
    c.show();

    cout << endl;

    c = a + 10;
    c.show();

    cout << endl;

    a += b;
    a.show();

    cout << endl;

    Coord t1(2, 3), t2(2, 3);
    if (t1 == t2)
    {
        cout << "\nКординаты равны\n";
    }
    else {
        cout << "\nКординаты не равны\n";
    }

    cout << (a != b) << endl;
    cout << (a > b) << endl;

#endif



}