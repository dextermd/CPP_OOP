#include <iostream>
#include <stdlib.h>
#include <conio.h>
#include <iomanip>
#include <Windows.h>
#include <string.h>
#include <vector>
#include <array>
#include "ListOne.h"
#include "ListOneT.h"
#include "Coord.h"
#include "MyString.h"
#include <forward_list>
#include "ListTwo.h"

using namespace std;

bool cmp_incr(const int & a, const int& b)
{
	return a > b;
}

int main()
{
#if 0

	/*
		Задание 1. 
		В уже существующий класс Односвязного списка(List_1) добавьте реализацию следующих методов :
		+ добавление элемента(значение передается вторым параметром) до элемента списка со значением первого параметра;
		+ добавление элемента по позиции(порядковому номеру), при этом элемент списка, занимавший эту позицию, становится следующим;
		+ удаление значения по позиции(порядковому номеру);
		+ перегрузку оператора >> для ввода данных одного элемента;
		+ конструктор с перемещением;
		+ перегрузку оператора присваивания(= ) с перемещением;

		Продемонстрируйте работу добавленных методов на примерах.
		Примечание: в методах, принимающих позицию элемента, осуществить проверку на существование переданной позиции в списке.
	*/

	ListOne list;
	list.add_end('!');
	list.add_end('@');
	list.add_end('#');
	list.add_end('$');
	list.add_end('%');
	list.show();

	list.add_do_element('%', '*');
	list.show();

	list.add_do_by_index(4, '-');
	list.show();
	list.pop_by_index(7);
	list.show();

	ListOne input;
	input.add_end('!');
	input.add_end('^');
	input.add_end('&');
	//cin >> input;
	input.show();
	cout << "\nCount: " << input.get_count() << endl;
	ListOne list2 = move(input);
	list2.show();

	ListOne a, b;
	a.add_end('1');
	a.add_end('2');
	a.add_end('3');
	a.add_end('4');
	a.add_end('5');
	a.show();

	b = move(a);
	b.show();


#endif

#if 0

	/*
		Задание 2. 
		В уже существующий класс Двунаправленного списка(ListTwo) добавьте реализацию
		следующих методов :
		− добавление элемента в начало списка;
		− добавление элемента(значение передается вторым параметром) после элемента списка со значением первого параметра;
		− удаление первого элемента списка;
		− удаление последнего элемента списка;
		− удаление всех элементов списка;
		− конструктор копирования;
		− конструктор с перемещением;
		− перегрузку оператора присваивания(= );
		− перегрузку оператора присваивания(= ) с перемещением;
		− перегрузку операторов << , >> ;
		− перегрузку оператора + для двух списков(конкатенация);
	*/


#endif

#if 0

	/*
		Задание 3. 
		Реализуйте шаблон класса Двунаправленного списка.Продемонстрируйте работу
		шаблона на стандартных и пользовательских типах(например, класс Координата).
	*/

#endif

}