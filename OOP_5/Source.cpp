#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <stdlib.h>
#include <conio.h>
#include <iomanip>
#include <Windows.h>
#include <string.h>
#include <algorithm>
#include <io.h>
#include <stdio.h>
#include <direct.h>
#include <assert.h>

using namespace std;

#define POUND_KG 0.453
//#define DEBUG
//#define FUNC

#ifdef FUNC
    inline void func() 
    {
        cout << "\nHello, World!";
    }
#else
    inline void func()
    {
        cout << "\nHello, World2!";
    }
#endif 



int main()
{

#if 0

    // ----------------------------------------------------------------------------------------- //
    // ПРЕПРОЦЕССОР ---------------------------------------------------------------------------- //
    // ----------------------------------------------------------------------------------------- //

    // Определение символьных констант при помощи #define -------------------------------------- //
    const double X = 1.25;
    

    cout << "POUND_KG = " << POUND_KG << endl;

    #define N 10
    int m[N];

    // Определение и использование программных конструкций(макроопределений)-------------------- //
    // при помощи  #define --------------------------------------------------------------------- //
    
    #define LINE for (int i = 0; i < 20; i++) cout << "= "; cout << endl;
    
    LINE;

    cout << "\nN = " << N << endl;

    #define N "IT STEP"

    cout << "\nN = " << N << endl;

    // Отмены константы ------------------------------------------------------------------------ //

    #undef N

    // Определение и использование параметризированных макросов при помощи #define ------------- //
    cout << "\n\nОпределение и использование параметризированных макросов при помощи #define\n";
    #define MUL(A,B) ((A)*(B))
    cout << MUL(2, 6) << endl;
    cout << MUL(1+1, 2+4) << endl;

    // Условная компиляция --------------------------------------------------------------------- //

    /*
    Директивы условной компиляции, позволяют генерировать
    программный код в зависимости от выполнимости
    определенных условий.

    Директивы препроцессора для условной компиляции
    #if <константное_выражение>
    #ifdef <идентификатор>
    #ifndef <идентификатор>
    #else #endif #elif

    Общая структура применения директив условной компиляции:
    #if / #ifdef / #ifndef <константное_выражение или идентификатор>
        <текст_1>
    #else // необязательная директива
        <текст_2>
    #endif
    */
    
    #ifdef DEBUG 
        cout << "\nНачало цыкла\n"; 
    #endif


    for (int i = 0; i < 20; i++)
    {
        cout << "* ";
    }

    #ifdef DEBUG 
        cout << "\nОкончание цыкла\n";
    #endif

    func();

    #define MAX 200
    int n = 10;

    #if MAX > 100
    n = MAX;
    #endif

    cout << "\nn = " << n << endl;

    
#endif

#if 1
    // Директива #error -------------------------------------------------------------------------- //

    /*
    Директива #error предписывает препроцессору прекратить обработку текста программы
    и выдать сообщение об ошибке.
    Эта директива имеет следующий синтаксис:
    #error сообщение
    */

    #ifdef DEBUG && POUND_KG
        #error declaration DEBUG && POUND_KG
    #endif // DEBUG && POUND_KG

    // Общие встроиные макроимена ----------------------------------------------------------------- //
    cout << __LINE__ << endl 
         << __FILE__ << endl
         << __DATE__ << endl 
         << __TIME__ << endl 
         << __TIMESTAMP__ << endl;


    // Директива #line --------------------------------------------------------------------------- //
    
    /*
    Директива #line предписывает препроцессору изменить номер текущей строки и
    имя компилируемого файла.

    Эта директива имеет следующий синтаксис:  #line номер_строки  "имя_файла"
    где номер_строки — константа, которая устанавливает новый номер
    для текущей строки в обрабатываемом исходном файле,
    а имя_файла задает новое имя файла для компилируемого файла.
    */

    //#line 100 "user.cpp"


    cout << endl << "line : " << __LINE__ << endl << __FILE__ << endl;

    // Макро оператор # -------------------------------------------------------------------------- //

    /*
    Оператор # используется в макрокомандах с одним параметром,
    для преобразования этого параметра в символьную строку языка программирования С.
    Такая макрокоманда имеет следующий вид:
    
    #define имя(параметр) шаблон
    */

    #define test(X) #X
    cout << test(hello C++!) << endl;

    
    // Макро оператор ## ------------------------------------------------------------------------- //

    /*
    Оператор "##" служит для соединения двух параметров макрокоманды
    в одну последовательность символов.
    Такая макрокоманда должна иметь следующий вид:

    #define имя(список_параметров) шаблон
    */


    #define ASSERT(expr)  if(!(expr)) { \
                cout << "assertion faild at \n";\
        cout << #expr<< "\nline: "<< __LINE__;\
        _getch();\
        exit(1); \
        }

    #define example(x,y) #x ## #y
    cout << example(hello, world) << endl;

    #define S 3
    //int arr[S] = { 0 };
    //int i = 6;
    //assert(i >= 0 && i < S);
    //arr[i] = 15;
    //cout << arr[i] << endl;


    /*
    Директива #pragma предписывает компилятору выполнить некоторое действие.
    Можно также сказать, что эта директива предназначена для определения
    других директив препроцессора, которые зависят
    от реализации и версии компилятора.

    Директива #pragma имеет следующий синтаксис:
    #pragma директива

    Здесь директива представляет собой предопределенную
    инструкцию для компилятора, которая является произвольным текстом.
    Директива #pragma используется для доступа к специфическим расширениям компилятора.

    https://docs.microsoft.com/en-us/cpp/preprocessor/pragma-directives-and-the-pragma-keyword?f1url=https%3A%2F%2Fmsdn.microsoft.com%2Fquery%2Fdev16.query%3FappId%3DDev16IDEF1%26l%3DEN-US%26k%3Dk(%2523pragma_CPP);k(%2523pragma);k(DevLang-C%2B%2B);k(TargetOS-Windows)%26rd%3Dtrue&view=vs-2019
    */

#pragma warning(disable: 4067)

#endif 





    _getch();
}