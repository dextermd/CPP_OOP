#include <iostream>
#include <stdlib.h>
#include <conio.h>
#include <iomanip>
#include <Windows.h>
#include "Coord.h"
#include "Stock.h"
#include "Rectangle.h"
#include "Car.h"
#include "Truck.h"
#include "tv.h"
#include "function.h"
#include "MyString.h"


using namespace std;



int main()
{

#if 1
	// -------------------------------------------------------------------------------------------- //
	// Семантика перемещения ---------------------------------------------------------------------- //
	// Operator = перемещения --------------------------------------------------------------------- //

	MyString s("Hello"), s2(" MOVE");

	MyString s3;
	s3 = s + "," + s2; // Вызовется operator= с перемещением (без глубокого копирования)

	cout << s3 << endl;


	Coord c1(2, 3), c2;

	c2 = c1;

	cout << c2 << endl;


#endif 

#if 0
	// -------------------------------------------------------------------------------------------- //
	// Семантика перемещения ---------------------------------------------------------------------- //
	// Конструктор перемещения -------------------------------------------------------------------- //
	/*
	Семантика перемещения (англ. move semantics) —
	собирательное название специализированных средств языка программирования C++,
	которые предназначены для осуществления перемещения данных во время
	инициализации и конструирования новых объектов,
	что позволяет сократить издержки на копирование.
	*/

	MyString s("Hello"), s2(" MOVE");

	MyString s3(s + s2);

	cout << endl << s3 << endl;

#endif 

#if 0
	// -------------------------------------------------------------------------------------------- //
	/*
		rvalue — привязывается к значениям,  находящимся в
		правой стороне операции присваивания,
		к которым НЕЛЬЗЯ применять операцию взятия адреса.

		Примеры: литеральные константы (за  исключением строк в стиле С, которые вычисляются как адреса),
		выражения наподобие х + у и возвращаемые значения функций при условии,
		что функции не возвращают ссылки.
	*/

	int k = 2;
	cout << endl << k << endl;
	cout << endl << 120 + 5 << endl;

	// 1
	int&& rv1 = 60;

	cout << endl << rv1 << "  " << &rv1 << endl;

	// 2
	int a = 10, b = 55;
	int&& rv2 = a + b;

	cout << endl << rv2 << "  " << &rv2 << endl;

	a = 5, b = 7;

	cout << endl << rv2 << "  " << &rv2 << endl;

	rv2 = a + b;
		
	cout << endl << rv2 << "  " << &rv2 << endl;

	// 3
	
	double&& res = sqrt(25.6);

	cout << endl << res << "  " << &res << endl;

#endif 

#if 0

	// -------------------------------------------------------------------------------------------- //
	/*
		lvalue = это выражение (имя переменной или разыменованный указатель),
		представляющий данные, для которых программа МОЖЕТ получить адрес.
	*/
	int n = 12;
	int& ref = n;

	cout << ref << "  " << n << endl;
	cout << &ref << "  " << &n << endl;

	ref = 100;

	cout << ref << "  " << n << endl;
	cout << &ref << "  " << &n << endl;

	cout << endl << "Ниже ptr" << endl;

	int* ptr = new int(5); // (5) сразу инициализация одного значения

	if (ptr)
	{
		int& ref_ptr = *ptr;

		cout << ref_ptr << "  " << *ptr << endl;
		cout << &ref_ptr << "  " << ptr << endl;

		delete ptr;
		ptr = nullptr;
	}

#endif

#if 0
	cout << AnyType(4, true, 22, 99 ,199, 0, 258,149, 52) << endl;
	cout << AnyType(4, false, 1.25, 31.25, 25.11) << endl;
#endif 

#if 0

	// ------------------------------------------------------------------------------------- //
	// 
	//printf("Hello\n");
	//int a = 5;
	//printf("a = %d", a);

	// Функции с произвольным количеством и типом аргуметов -------------------------------- //

	cout << summa(4, 1, 3, -5, 10, 3, 6, 4) << endl;
	cout << summa_double(4, 1.25, 31.25, -5.25, 3.3, 6.6, 4.4) << endl;

#endif 

#if 0

	// ------------------------------------------------------------------------------------- //
	// Пример - дружественные классы 

	Tv t;
	t.settings();
	t.onoff();
	t.settings();
	t.chanup();
	t.settings();


	Remote black;
	// Вариант 1
	black.set_chan(t, 25);
	t.settings();

	// Вариант 2
	//set_chan(t, black, 30);
	//t.settings();


#endif 

#if 0

	// ------------------------------------------------------------------------------------- //
	// Пример - дружественная функция в классе 

	class Rectangle r(12, 58, '+', "Red", "Rectangle");
	r.show();

	r.set_symbol('#'); // Вызов метода класса

	r.show();

	set_symbol(r, '%'); // Вызов дружественной функции

	r.show();

#endif 

#if 0

	// ------------------------------------------------------------------------------------- //
	// Пример - дружественная функция для двух классов

	// Car - кол-во пассажиров, скорость
	// Truck - грузовместимость, скорость


	Car c(2, 100);
	c.show();

	Truck t(600, 80);
	t.show();

	cout << "\nРазность скоростей: " << speed_compare(c, t) << endl;


#endif 


}