#include <iostream>
#include <stdlib.h>
#include <conio.h>
#include <iomanip>
#include <Windows.h>
#include "Coord.h"
#include "Stock.h"
#include "MyString.h"
#include "Rectangle.h"

using namespace std;

Coord operator-(const Coord& a, const Coord& b)
{
    Coord result;

    result.reset(a.get_x() - b.get_x(), a.get_y() - b.get_y());

    return result;

    //return Coord(a.get_x() - b.get_x(), a.get_y() - b.get_y());
}

int main()
{

#if 0

    cout << "\n ---------------------------------------------- \n";
    cout << "4. Абстрактный к абстрактному";
    cout << "\n ---------------------------------------------- \n";

    class Rectangle r;
    r.show();

    Coord c;

    c = r;
    cout << c << endl;


    MyString mc;
    cout << mc << endl;

    mc = c;

    cout << mc << endl;

#endif 


#if 0
    // -------------------------------------------------------------------------------- //
    // Преобразования, определяемые классом
    // 1. Стандартный к стандартному
    // 2. Стандартный к абстрактному - конструкторы преобразования
    // 3. Абстрактный к стандартному - operator type()
    // 4. Абстрактный к абстрактному
    // -------------------------------------------------------------------------------- //

    // 1. Стандартный к стандартному

    cout << "\n ---------------------------------------------- \n";
    cout << "1. Стандартный к стандартному";
    cout << "\n ---------------------------------------------- \n";

    int a = 25.5;
    cout << a << endl; // 25

    char s = 43;
    cout << s << endl; // +

    cout << "\n ---------------------------------------------- \n";
    cout << "2. Стандартный к абстрактному - конструкторы преобразования";
    cout << "\n ---------------------------------------------- \n";

    // 2. Стандартный к абстрактному - конструкторы преобразования
    Coord b(2, -2);
    b = 15;
    cout << b << endl;
    b = "12,9";
    cout << b << endl;
        
    cout << "\n ---------------------------------------------- \n";
    cout << "3. Абстрактный к стандартному - operator type()";
    cout << "\n ---------------------------------------------- \n";

    Coord x(15, 9);
    int w;
    w = x; // coord -> int (operator int();)
    cout << w;

    MyString s("ss");
    //char* tmp;
    //tmp = s;

    //cout << tmp;

#endif 

#if 0

    // -------------------------------------------------------------------------------- //
    // Глобальная перегрузка 
    /*
        Предпочительней перегрузка в классе.
        Глобальная перегрузка может быть более удобной для адаптации классов, которые находятся в библиотеках, где исходный текст невозможно изменить и перекомпилировать.
        То есть добавить в класс перегрузку в качестве метода класса нереально.
    */

    Coord a(12, 6), b(-3, 5), c;
    c = a - b;
    cout << a << " - " << b << " = " << c;

#endif 

#if 0

    // Перегрузка оператора ()  для класса MyString

    MyString s("Hello");
    s("New content!");
    cout << s << endl;

#endif 

#if 0

    // -------------------------------------------------------------------------- //
    // Специальные перегрузки
    // Перегрузка "круглых скобок"
    // В отличие от бинарных и унарных операторов, оператор вызова функции () может принимать любое количество аргументов (от 0 и больше).

    Coord a(15, -9);
    a.reset(12, 3);
    cout << a << endl;

    a(100, -3);
    cout << a << endl;
    a(200);
    cout << a << endl;
    a();
    cout << a << endl;



#endif 

#if 0

    // -------------------------------------------------------------------------- //
    // Перегрузка потока вывода (<<) (>>) MyString

    MyString a("Hello"), b;
    cout << a << endl;

    cout << "\nВведите название страны: ";
    cin >> b;
    cout << b << " " << b.getLength();
    cout << endl << endl;

#endif 

#if 0
    // -------------------------------------------------------------------------- //
    // Перегрузка потока ввода (>>)

    Coord c;
    cin >> c;

#endif 

#if 0
    // -------------------------------------------------------------------------- //
    // Перегрузка потока вывода (<<)

    Coord a(2, 6), b(1,1);
    a.show();
    cout << a << endl << b;

    cout << endl;


#endif 

#if 0

    // Дружественные функции 

    /*
    3. При перегрузке бинарных операций в случае, когда
    левый операнд не является объектом пользовательского класса
    обязательно    используются дружественная функция (принимает оба операнда).

    Дружественная функция - не является методом класса.
    Дружественная функция - есть доступ к закрытым полям класса через объект.
    Дружественная функция - нет доступа к this.

    ***При перегрузке бинарных операций можно использовать дружественную функцию в любом случае,
    но передаются всегда оба операнда.
    */

    /*
        Для класса coord перегрузить операцию:
            int + coord
    */

    Coord a(20, 6), b;

    // b = a + 10;

    // Левый оперант бинарной операции не является обьектом нашего класса
    // Когда левый операнд не является обьектом пользовательского класса для перегрузки  используется дружественная функция
    b = 10 + a;
    b.show();

    Coord t(2, 6), t1(-12, 5), t2;
    t2 = t * t1;
    cout << endl;
    t.show();
    t1.show();
    t2.show();


#endif 




}